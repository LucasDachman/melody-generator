{"version":3,"sources":["js/KeyRow.js","js/NotesUtil.js","js/PianoRoll.js","js/Synth.js","js/App.js","serviceWorker.js","index.js"],"names":["KeyRow","onWheel","e","col","_this$props","_this","props","updateProbability","oldProb","steps","probability","deltaY","_this2","this","_this$props2","isBlack","onClick","className","black","react_default","a","createElement","concat","map","step","KeyRow_Step","isActive","key","React","PureComponent","Step","_ref","join","note","color","PianoRoll","row","composition","notes","onClickStep","onClickKey","n","name","js_KeyRow","value","Component","Synth","Object","classCallCheck","synth","Tone","PolySynth","toMaster","chords","loop","Loop","time","nextChord","chanceNote","console","log","context","resume","triggerAttackRelease","start","Transport","bpm","latencyHint","currentChord","length","reduce","acc","curr","Math","floor","random","toConsumableArray","arr","_","flatMap","Array","fill","stop","numNotes","numSteps","startNote","App","possibleConstructorReturn","getPrototypeOf","call","arguments","undefined","endNote","i","noteNumber","Frequency","toNote","includes","error","generateNotes","toggleCell","setState","state","newComp","cloneDeep","cell","createSequence","playKey","playNote","clear","forEach","el","zip","apply","noteRow","pick","setNotes","js_PianoRoll","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc120e01.chunk.js","sourcesContent":["import React from 'react';\n\nclass KeyRow extends React.PureComponent {\n\n  onWheel = (e, col) => {\n    const { updateProbability, steps } = this.props;\n    let oldProb = steps[col].probability;\n    if (e.deltaY > 0 && oldProb < 100) {\n      updateProbability(col, oldProb + 1);\n    } \n    else if (e.deltaY < 0 && oldProb > 1) {\n      updateProbability(col, oldProb - 1);\n    }\n  }\n\n  render() {\n    const { steps, isBlack, onClick } = this.props;\n    const className = this.props.black ? \"black\" : \"white\";\n    return (\n      <section className={`key-row ${className}`}>\n        <div className='steps-row'>\n          {steps.map((step, col) => {\n            return <Step isBlack={isBlack}\n              isActive={step.isActive}\n              onClick={() => onClick(col)}\n              onWheel={(e) => this.onWheel(e, col)}\n              probability={step.probability}\n              key={col} />\n          })}\n        </div>\n      </section>\n    );\n  }\n}\n\nconst Step = ({ isBlack, isActive, onClick, onWheel, probability}) => {\n  const className = ['piano-cell',\n    isBlack ? 'black' : 'white',\n    isActive ? 'active' : 'inactive'\n  ].join(' ');\n  return (\n    <span className={className}\n      onClick={onClick}\n      onWheel={isActive ? onWheel : null}>\n      {isActive && <p>{probability}</p>}\n    </span>\n  )\n};\n\nexport default KeyRow;","import Tone from 'tone';\n\n// helper functions\nexport function isBlack(note) {\n  return note.color === 'black';\n}\n\nexport function isWhite(note) {\n  return note.color === 'white'\n}\n\nexport function generateNotes(startNote = 0, endNote = 127) {\n  if (startNote < 0 || endNote > 127) {\n    console.error('note out of range');\n    return;\n  }\n  \n  let notes = new Array(endNote - startNote).fill(0).map((_, i) => i + startNote);\n  notes = notes.map(noteNumber => {\n    const name = Tone.Frequency(noteNumber, 'midi').toNote()\n    return {\n      name: name,\n      color: name.includes('#') ? 'black' : 'white',\n    }\n  });\n  return notes;\n}\n","import React from 'react';\nimport KeyRow from './KeyRow';\nimport { isBlack } from './NotesUtil';\n\nclass PianoRoll extends React.Component {\n\n  onClickStep(row, col) {\n\n  }\n\n  render() {\n    const steps = this.props.composition;\n    const { notes, onClickStep, onClickKey, updateProbability } = this.props;\n    // C4 to A5\n\n    return (\n      <div className='piano-roll'>\n        <section className='piano-roll-keys'>\n          {notes.map((n) => {\n            const className = ['piano-key', isBlack(n) ? 'black' : 'white'].join(' ');\n            return (\n              <div className={className}\n                onClick={() => onClickKey(n)}\n                key={n.name}>\n                <p>{n.name}</p>\n              </div>\n            );\n          })}\n        </section>\n        <section className=\"piano-roll-editor\">\n          {notes.map((n, row) => {\n            return <KeyRow name={n.name}\n              steps={steps[row]}\n              black={isBlack(n)}\n              onClick={(col) => onClickStep(row, col)}\n              updateProbability={(col, value) => updateProbability(row, col, value)}\n              key={row} />\n          })}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default PianoRoll;","import Tone from 'tone';\nimport _ from 'lodash';\n\nexport default class Synth {\n  synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n  chords = [];\n  step = 0;\n\n  loop = new Tone.Loop((time) => {\n    const nextChord = this.chanceNote();\n    console.log('next chord:', nextChord)\n    Tone.context.resume();\n    nextChord &&\n      this.synth.triggerAttackRelease(nextChord, '32n', time);\n  }, '16n').start('+0.1');\n\n  constructor() {\n    // this.loop.humanize = true;\n    Tone.Transport.bpm.value = 90;\n    Tone.context.latencyHint = 'playback'\n  }\n\n  chanceChord() {\n    let currentChord = this.chords[this.step] || [];\n    this.step++;\n    if (this.step >= this.chords.length) this.step = 0;\n    // find probabilities for each note\n    return currentChord.reduce((acc, curr) => {\n      // 0 <= x <= 100\n      const chance = Math.floor(Math.random() * 101);\n      return chance <= curr.probability ? [...acc, curr.note.name] : acc;\n    }, []);\n  }\n\n  chanceNote() {\n    let currentChord = this.chords[this.step] || [];\n    this.step++;\n    if (this.step >= this.chords.length) this.step = 0;\n    // fill the array {probability} times with the note name\n    const arr = _.flatMap(currentChord, (note) => {\n      return new Array(note.probability).fill(note.note.name);\n    });\n    console.log(arr);\n\n    const index = Math.floor(Math.random() * arr.length);\n    return arr[index];\n  }\n\n  playNote(note) {\n    Tone.context.resume();\n    this.synth.triggerAttackRelease(note, \"4n\");\n  }\n\n  setNotes(chords) {\n    this.chords = chords;\n  }\n\n  start() {\n    Tone.context.resume();\n    Tone.Transport.start();\n  }\n\n  stop() {\n    Tone.Transport.stop();\n  }\n}","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport PianoRoll from './PianoRoll'\nimport { generateNotes } from './NotesUtil';\nimport Synth from './Synth';\n\nconst numNotes = 24;\nconst numSteps = 8;\nconst startNote = 36;\n\nclass App extends Component {\n  notes = generateNotes(startNote, startNote + numNotes);\n  synth = new Synth();\n\n  constructor(props) {\n    super(props);\n    let composition = new Array(numNotes)\n      .fill(null)\n      .map((_, i) => new Array(numSteps).fill(null)\n        .map(() => ({\n          isActive: false,\n          note: this.notes[i],\n          probability: 100\n        }))\n      );\n    this.state = {\n      composition: composition\n    };\n  }\n\n  createSequence() {\n    const chords = _.zip(...this.state.composition)\n      .map((noteRow) => {\n        return noteRow.reduce((acc, curr) => {\n          return curr.isActive ? [...acc, _.pick(curr, ['note.name', 'probability'])] : acc;\n        }, []);\n      });\n\n    this.synth.setNotes(chords);\n  }\n\n  toggleCell = (row, col) => {\n    this.setState((state) => {\n      const newComp = _.cloneDeep(state.composition);\n      const cell = newComp[row][col];\n      cell.isActive = !(cell.isActive);\n      if (!cell.isActive) cell.probability = 100;\n      return { composition: newComp };\n    }, () => {\n      this.createSequence();\n    });\n  }\n\n  updateProbability = (row, col, value) => {\n    this.setState((state) => {\n      const newComp = _.cloneDeep(state.composition);\n      newComp[row][col].probability = value;\n      return { composition: newComp };\n    }, () => {\n      this.createSequence();\n    })\n  }\n\n  playKey = (note) => {\n    this.synth.playNote(note.name);\n  }\n\n  clear = () => {\n    this.setState((state) => {\n      const newComp = _.cloneDeep(state.composition);\n      newComp.forEach(row => {\n        row.forEach(el => {\n          el.isActive = false;\n          el.probability = 100;\n        });\n      });\n      return { composition: newComp };\n    }, () => {\n      this.createSequence();\n    });\n  }\n\n  render() {\n    return (\n      <main className=\"app\">\n        <button onClick={this.synth.start}>Play</button>\n        <button onClick={this.synth.stop}>Stop</button>\n        <button onClick={this.clear}>Clear</button>\n        <PianoRoll notes={this.notes}\n          composition={this.state.composition}\n          onClickStep={this.toggleCell}\n          updateProbability={this.updateProbability}\n          onClickKey={this.playKey} />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}